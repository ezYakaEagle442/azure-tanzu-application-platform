# This workflow will install TAP on AKS
name: Install TAP on AKS

env:
  APP_NAME: tap42
  LOCATION: westeurope # francecentral
  RG_KV: rg-kv-tanzu101 # RG where to deploy KV
  RG_APP: rg-aks-tap-apps # RG where to deploy the other Azure services: AKS, TAP, ACR, MySQL, etc.
  
  DNS_ZONE: cloudapp.azure.com
  APP_DNS_ZONE: westeurope.cloudapp.azure.com
  CUSTOM_DNS: appinnohandsonlab.com
  AZURE_DNS_LABEL_NAME: tap-gui
  TANZU_DNS_CHILD_ZONE: tap.appinnohandsonlab.com

  # ==== Azure storage t, values must be consistent with the ones in iac/bicep/modules/aks/storage.bicep ====:
  AZ_STORAGE_NAME : statapaks # customize this
  AZ_BLOB_CONTAINER_NAME: statapaks-blob # customize this
  # AZ_BLOB_SVC_NAME: default # MUST NOT BE MODIFIED

  # https://learn.microsoft.com/en-us/rest/api/storageservices/setting-timeouts-for-blob-service-operations
  AZ_BLOB_MAX_CONNECTIONS: 10
  AZ_BLOB_MAXSIZE_CONDITION: 440401920 # 420 Mb
  AZ_BLOB_TIMEOUT: 600

  # ==== Tanzu Tools ====
  IMG_PKG_CONCURRENCY: 2 # 1 or 2 ONLY for GitHub pulic Runners /!\ not more. Test with value 42 on Self-Hosted Runners deployed to AKS

  TANZU_INSTALL_DIR: tanzu
  TANZU_ESSENTIALS: tanzu-cluster-essentials-linux-amd64-1.4.0.tgz
  TANZU_GUI_CAT: tap-gui-blank-catalog.tgz
  TANZU_CLI: tanzu-framework-linux-amd64-v0.25.4.tar # /!\ the version name must match M.n.p like v0.25.4 NOT v0.25.4.1

  TANZU_BLOB_CLI: tanzu-cli
  TANZU_BLOB_ESSENTIALS: tanzu-essentials
  TANZU_BLOB_GUI_CAT: tanzu-catalog

  TANZU_CLI_VERSION: v0.25.4
  TAP_VERSION_NUMBER: 1.4.0
  TANZU_REGISTRY: registry.tanzu.vmware.com

  AZURE_CONTAINER_REGISTRY: tanzu42 # The name of the ACR, must be UNIQUE. The name must contain only alphanumeric characters, be globally unique, and between 5 and 50 characters in length.
  REGISTRY_URL: tanzu42.azurecr.io  # set this to the URL of your registry
  REPOSITORY: tap                   # set this to your ACR repository
  REPO_SUBFOLDER_APP_TAP: tanzu-app-tap

  CATALOG_URL: https://github.com/ezYakaEagle442/tap-catalog
  TAP_NAMESPACE: tanzu
  DEV_NAMESPACE: tap-dev
  TAP_INSTALL_NAMESPACE: tap-install
  KAPP_NAMESPACE: kapp-controller
  AKS_CLUSTER_NAME: aks-tap42  # set this to your AKS cluster name
  CONTEXT_NAME: aks-tap42 # usuallythe conext is the same as the AKS cluster name

  VNET_NAME: vnet-aks

  DNS_PREFIX: tanzu-tap42 # customize this
  ING_NS: tanzu-system-ingress # Namespace to use for the Ingress Controller
  AKS_IDENTITY_NAME: id-tap-cluster-dev-westeurope-101 # customize this
  
  # ==== Secrets ====

  credentials: ${{ secrets.AZURE_CREDENTIALS }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

  CERT_ADMIN_EMAIL: ${{ secrets.TANZU_NET_USER }}
  TANZU_NET_USER: ${{ secrets.TANZU_NET_USER }}
  TANZU_NET_PASSWORD: ${{ secrets.TANZU_NET_PASSWORD }}
  GH_PAT: ${{ secrets.GH_PAT }}

  # ==== Versions ====
  DEPLOYMENT_VERSION: 2.6.13
  AZ_CLI_VERSION: 2.44.1
  JAVA_VERSION: 11

on:
  workflow_dispatch:
  workflow_call:

jobs:
 
  install-tap:
    runs-on: ubuntu-latest
    steps:

    - name: Login with GHA Runner SP
      uses: azure/login@v1 # https://github.com/marketplace/actions/azure-login
      with:
        creds: ${{ env.credentials }} # ${{ secrets.AZURE_CREDENTIALS }}

    - name: Checkout
      uses: actions/checkout@v3 # https://github.com/actions/checkout

    - name: Set Base environment variables
      run: |

        echo "LOCAL_IP=$(curl whatismyip.akamai.com)" >> $GITHUB_ENV
        echo "GH_WORKSPACE=${{ github.workspace }}" >> $GITHUB_ENV # "/github/workspace"

        managed_rg=$(az aks show --resource-group ${{ env.RG_APP }} --name ${{ env.AKS_CLUSTER_NAME }} --query nodeResourceGroup -o tsv)
        echo "CLUSTER_RESOURCE_GROUP:" $managed_rg
        echo "managed_rg=$managed_rg" >> $GITHUB_ENV

      shell: bash

    - name: Display environment variables
      run: |
        echo "Checking GITHUB_ENV"
        echo "LOCAL_IP=$LOCAL_IP"
        echo "managed_rg=$managed_rg"
        echo "GH_WORKSPACE=$GH_WORKSPACE"
      shell: bash

    # https://github.com/Azure/aks-set-context/tree/releases/v1
    - name: AKS Set Context
      uses: azure/aks-set-context@v1
      with:
          creds: '${{ secrets.AZURE_CREDENTIALS }}' # Azure credentials
          resource-group: ${{ env.RG_APP }} 
          cluster-name: ${{ env.AKS_CLUSTER_NAME }}
      id: setakscontext

    # kubectl config set-credentials cicd-runner --token=bearer_token
    # TODO for AAD Integration:
    # https://github.com/marketplace/actions/setup-kubelogin
    # https://github.com/Azure/kubelogin
    - uses: azure/use-kubelogin@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GH_PAT }}
      with:
        kubelogin-version: 'latest'
      id: kubelogin

    - name: Test CLI
      run: |

            kubectl config get-contexts
            kubectl get nodes -o wide

      shell: bash

    - name: Authorize local IP access to the Azure BLOB Storage 
      if: ${{ always() }}
      run: |
        LOCAL_IP=$(curl whatismyip.akamai.com)
        echo "LOCAL_IP=$(curl whatismyip.akamai.com)" >> $GITHUB_ENV
        echo "About to ADD network-rule to ALLOW $LOCAL_IP to Azure BLOB Storage ${{ env.AZ_STORAGE_NAME }}"
        az storage account network-rule add --ip-address $LOCAL_IP --account-name  ${{ env.AZ_STORAGE_NAME }}  --action "Allow" -g ${{ env.RG_APP }}  --only-show-errors
        sleep 30        
      shell: bash

    - name: Download Tanzu Tools from Azure BLOB Storage
      id: blob_download
      run: | 

        # https://learn.microsoft.com/en-us/azure/storage/blobs/blob-cli

        pwd
        ls -al

        ls -al ${{ github.workspace }}/${{ env.TANZU_INSTALL_DIR }}

        # TODO: need a workaround to resolve the network issues between GHA Runnr and Azure Storage
        # https://github.com/actions/runner-images/blob/main/images/linux/scripts/helpers/install.sh

        echo "About to download Tanzu tools from Azure BLOB Storage"
        az storage blob download --name ${{ env.TANZU_BLOB_CLI }} --file ${{ github.workspace }}/${{ env.TANZU_INSTALL_DIR }}/${{ env.TANZU_CLI }} --container-name ${{ env.AZ_BLOB_CONTAINER_NAME }} --account-name ${{ env.AZ_STORAGE_NAME }} --auth-mode login --max-connections ${{ env.AZ_BLOB_MAX_CONNECTIONS }}
        az storage blob download --name ${{ env.TANZU_BLOB_ESSENTIALS }} --file ${{ github.workspace }}/${{ env.TANZU_INSTALL_DIR }}/${{ env.TANZU_ESSENTIALS }} --container-name ${{ env.AZ_BLOB_CONTAINER_NAME }} --account-name ${{ env.AZ_STORAGE_NAME }} --auth-mode login --max-connections ${{ env.AZ_BLOB_MAX_CONNECTIONS }}
        az storage blob download --name ${{ env.TANZU_GUI_CAT }} --file ${{ github.workspace }}/${{ env.TANZU_INSTALL_DIR }}/${{ env.TANZU_GUI_CAT }} --container-name ${{ env.AZ_BLOB_CONTAINER_NAME }} --account-name ${{ env.AZ_STORAGE_NAME }} --auth-mode login --max-connections ${{ env.AZ_BLOB_MAX_CONNECTIONS }}

        ls -al ${{ github.workspace }}/${{ env.TANZU_INSTALL_DIR }}
        ls -al ${{ github.workspace }}/${{ env.TANZU_INSTALL_DIR }}/${{ env.TANZU_CLI }} 
        ls -al ${{ github.workspace }}/${{ env.TANZU_INSTALL_DIR }}/${{ env.TANZU_ESSENTIALS }} 
        ls -al ${{ github.workspace }}/${{ env.TANZU_INSTALL_DIR }}/${{ env.TANZU_GUI_CAT }}

      shell: bash

    - name: Disable local IP access to the Azure BLOB Storage 
      if: ${{ always() }}
      run: |
        echo "About to REMOVE network-rule ALLOWING $LOCAL_IP to Azure BLOB Storage ${{ env.AZ_STORAGE_NAME }}"
        az storage account network-rule remove --ip-address $LOCAL_IP --account-name  ${{ env.AZ_STORAGE_NAME }} -g ${{ env.RG_APP }} --only-show-errors
      shell: bash

    # https://docs.vmware.com/en/VMware-Tanzu-Application-Platform/1.4/tap/prerequisites.html
    # https://github.com/beeNotice/tanzu-tools/tree/main/tap

    - name: Get Tanzu Application Platform GUI Blank Catalog
      run: |

            # TODO

      shell: bash

    - name: Install CLI & Plugins
      run: |

            tar -xvf ${{ env.TANZU_INSTALL_DIR }}/${{ env.TANZU_CLI }} -C ${{ env.TANZU_INSTALL_DIR }}
            export TANZU_CLI_NO_INIT=true

            cd ${{ env.TANZU_INSTALL_DIR }}
            export VERSION=${{ env.TANZU_CLI_VERSION }}
            install cli/core/$VERSION/tanzu-core-linux_amd64 /usr/local/bin/tanzu

            tanzu version
            tanzu plugin install --local cli all
            tanzu plugin list

      shell: bash

    # https://docs.vmware.com/en/Cluster-Essentials-for-VMware-Tanzu/1.4/cluster-essentials/deploy.html
    - name: Deploy Cluster Cluster Essentials
      run: |

            tar -xvf ${{ env.TANZU_INSTALL_DIR }}/${{ env.TANZU_ESSENTIALS }} -C ./${{ env.TANZU_INSTALL_DIR }}

            kubectl config get-contexts
            kubectl config use-context ${{ env.CONTEXT_NAME }}
            kubectl create namespace ${{ env.KAPP_NAMESPACE }} --dry-run=client -o yaml > ns-kapp-controller.yaml
            kubectl apply -f ns-kapp-controller.yaml

            # (Optional) If your registry needs a custom certificate, you must load that configuration into the cluster before installing kapp-controller. If your registry uses a public certificate, this step is not required.
            #kubectl create secret generic kapp-controller-config \
            #  --namespace ${{ env.KAPP_NAMESPACE }} \
            #  --from-file caCerts=ca.crt

            export INSTALL_BUNDLE=${{ env.TANZU_REGISTRY}}/tanzu-cluster-essentials/cluster-essentials-bundle@sha256:5fd527dda8af0e4c25c427e5659559a2ff9b283f6655a335ae08357ff63b8e7f
            export INSTALL_REGISTRY_HOSTNAME=${{ env.TANZU_REGISTRY}}
            export INSTALL_REGISTRY_USERNAME=${{ env.TANZU_NET_USER }}
            export INSTALL_REGISTRY_PASSWORD=${{ env.TANZU_NET_PASSWORD }}
            cd ${{ env.TANZU_INSTALL_DIR }}
            ./install.sh --yes

            cp kapp /usr/local/bin/kapp
            cp imgpkg /usr/local/bin/imgpkg

      shell: bash

    # https://docs.vmware.com/en/VMware-Tanzu-Application-Platform/1.4/tap/install.html
    - name: Relocate images to ACR
      run: |

            echo "This step can take up to 35 minutes ..."
            set -euo pipefail
            #access_token=$(az account get-access-token --query accessToken -o tsv)
            #acr_token=$(curl https://${{ env.REGISTRY_URL }}/oauth2/exchange -v -d "grant_type=access_token&service=${{ env.REGISTRY_URL }}&access_token=$access_token" | jq -r .acr_token)

            # https://learn.microsoft.com/en-us/azure/container-registry/container-registry-repository-scoped-permissions
            # This feature is available in the Premium container registry service tier
            #az acr scope-map create --name TapAcrScopeMap --registry ${{ env.AZURE_CONTAINER_REGISTRY }} \
            #  --repository samples/hello-world \
            #  content/write content/read \
            #  --description "TAP ACR Push scope map"

            #acr_token=$(az acr token create --name TapAcrToken --scope-map TapAcrScopeMap --registry ${{ env.AZURE_CONTAINER_REGISTRY }} | jq -r .credentials.passwords[0].value)
              
            # az acr login --name ${{ env.REGISTRY_URL }} --expose-token
            # docker login ${{ env.REGISTRY_URL }} -u 00000000-0000-0000-0000-000000000000 --password-stdin <<< "$acr_token"
            # az configure --defaults acr=${{ env.AZURE_CONTAINER_REGISTRY }}
            acr_usr=$(az acr credential show --name ${{ env.REGISTRY_URL }} -g ${{ env.RG_APP }} | jq -r .username) # ${{ env.AZURE_CONTAINER_REGISTRY }} 
            acr_pwd=$(az acr credential show --name ${{ env.REGISTRY_URL }} -g ${{ env.RG_APP }} | jq -r .passwords[0].value)
            az acr login --name ${{ env.REGISTRY_URL }} -u $acr_usr -p $acr_pwd

            docker login ${{ env.TANZU_REGISTRY}} -u ${{ env.TANZU_NET_USER }} -p ${{ env.TANZU_NET_PASSWORD }}

            export INSTALL_REGISTRY_HOSTNAME=${{ env.REGISTRY_URL }}
            export INSTALL_REGISTRY_USERNAME=$acr_usr # 00000000-0000-0000-0000-000000000000
            export INSTALL_REGISTRY_PASSWORD=$acr_pwd # "$acr_token"

            export TAP_VERSION=${{ env.TAP_VERSION_NUMBER }}
            export INSTALL_REPO=${{ env.REPOSITORY }}  
            
            imgpkg --help
            imgpkg copy --help

            imgpkg tag list -i ${{ env.TANZU_REGISTRY}}/tanzu-application-platform/tap-packages | grep -v sha | sort -V
            echo "Tag list displayed, about to copy packages using Tag ${TAP_VERSION} to ${INSTALL_REGISTRY_HOSTNAME}/${INSTALL_REPO}/tap-packages"
            imgpkg copy --concurrency ${{ env.IMG_PKG_CONCURRENCY}} -b ${{ env.TANZU_REGISTRY}}/tanzu-application-platform/tap-packages:${TAP_VERSION} --to-repo ${INSTALL_REGISTRY_HOSTNAME}/${INSTALL_REPO}/tap-packages

            kubectl create namespace ${{ env.TAP_INSTALL_NAMESPACE }} --dry-run=client -o yaml > ns-install.yaml
            kubectl apply -f ns-install.yaml  

            tanzu secret registry add tap-registry \
              --username ${INSTALL_REGISTRY_USERNAME} --password ${INSTALL_REGISTRY_PASSWORD} \
              --server ${INSTALL_REGISTRY_HOSTNAME} \
              --export-to-all-namespaces --yes --namespace ${{ env.TAP_INSTALL_NAMESPACE}}

            tanzu package repository add tanzu-tap-repository \
              --url ${INSTALL_REGISTRY_HOSTNAME}/${INSTALL_REPO}/tap-packages:$TAP_VERSION \
              --namespace ${{ env.TAP_INSTALL_NAMESPACE}}

            tanzu package repository get tanzu-tap-repository --namespace ${{ env.TAP_INSTALL_NAMESPACE}}
            tanzu package available list --namespace ${{ env.TAP_INSTALL_NAMESPACE}}

      shell: bash

    # After installing the full profile on your cluster, you must set up developer namespaces. 
    # Otherwise, creating a workload, a Knative service or other Tanzu Application Platform packages fails.
    - name: Setup Developer namespaces
      run: |

            acr_usr=$(az acr credential show --name ${{ env.REGISTRY_URL }} -g ${{ env.RG_APP }} | jq -r .username) # ${{ env.AZURE_CONTAINER_REGISTRY }} 
            acr_pwd=$(az acr credential show --name ${{ env.REGISTRY_URL }} -g ${{ env.RG_APP }} | jq -r .passwords[0].value)

            tanzu secret registry add acr-registry-credentials --server ${{ env.AZURE_CONTAINER_REGISTRY}} --username $acr_usr --password $acr_pwd --export-to-all-namespaces --yes --namespace ${{ env.TAP_INSTALL_NAMESPACE}}
            kubectl create namespace ${{ env.DEV_NAMESPACE }} --dry-run=client -o yaml > ns-dev.yaml
            kubectl apply -f ns-dev.yaml            
            kubectl label namespaces ${{ env.DEV_NAMESPACE}} apps.tanzu.vmware.com/tap-ns=""
            kubectl get secrets,serviceaccount,rolebinding,pods,deploy,configmap -n ${{ env.DEV_NAMESPACE}}

      shell: bash

    - name: Setup API-Portal
      run: |

            mkdir ${{ env.TANZU_INSTALL_DIR }}/deploy
            wget https://raw.githubusercontent.com/ezYakaEagle442/tanzu-tools/main/tap/data/api-portal-ingress.yaml -q --no-cache -O ${{ env.TANZU_INSTALL_DIR }}/k8s/api-portal-ingress.yaml
            export ING_HOST= ${{ env.TANZU_DNS_CHILD_ZONE }}
            echo "INGRESS HOST " $ING_HOST
            mkdir ${{ env.TANZU_INSTALL_DIR }}/k8s/deploy

            envsubst < ${{ env.TANZU_INSTALL_DIR }}/k8s/api-portal-ingress.yaml > ${{ env.TANZU_INSTALL_DIR }}/k8s/deploy/api-portal-ingress.yaml
            cat $TANZU_INSTALL_DIR/k8s/deploy/api-portal-ingress.yaml
            kubectl apply -f $TANZU_INSTALL_DIR/k8s/deploy/api-portal-ingress.yaml

            kubectl get ingress -A

            wget https://raw.githubusercontent.com/ezYakaEagle442/tanzu-tools/main/tap/data/workload.yaml -q --no-cache -O ${{ env.TANZU_INSTALL_DIR }}/k8s/workload.yaml
            export NS= ${{ env.DEV_NAMESPACE }}
            echo "DEV_NAMESPACE " $NS

            envsubst < ${{ env.TANZU_INSTALL_DIR }}/k8s/workload.yaml > ${{ env.TANZU_INSTALL_DIR }}/k8s/deploy/workload.yaml
            cat $TANZU_INSTALL_DIR/k8s/deploy/workload.yaml

            tanzu apps workload create -f  $TANZU_INSTALL_DIR/k8s/deploy/workload.yaml -y
    

            # harbor-fmartin-tanzu.francecentral.cloudapp.azure.com/fmartin/tanzu-simple:latest
            # image: ${ACR_URL}/${REPO}/tanzu-simple:${IMAGE_TAG}
            tag_id=latest
            imageNameTanzuSimple="${{ env.REGISTRY_URL }}/${{ env.REPOSITORY }}/tanzu-simple:$tag_id"
            wget https://raw.githubusercontent.com/ezYakaEagle442/tanzu-simple/main/k8s/02-deployment.yml  -q --no-cache -O ${{ env.TANZU_INSTALL_DIR }}/k8s/tanzu-simple-deployment.yml
            envsubst < ${{ env.TANZU_INSTALL_DIR }}/k8s/tanzu-simple-deployment.yml > ${{ env.TANZU_INSTALL_DIR }}/k8s/deploy/tanzu-simple-deployment.yml

      shell: bash


      # https://docs.vmware.com/en/VMware-Tanzu-Application-Platform/1.4/tap/authn-authz-azure-ad.html
    - name: Integrate with AAD
      run: |

            echo "You must be Admin of your AAD Tenant, and you need a minimum version of helm 3.3."
            echo "See https://learn.microsoft.com/en-us/azure/aks/managed-aad"
            echo "Read https://docs.vmware.com/en/VMware-Tanzu-Application-Platform/1.4/tap/authn-authz-azure-ad.html"
            echo ""

      shell: bash   

    - name: Prepare Contour TLS pre-req
      run: |

            export ING_HOST=${{ env.TANZU_DNS_CHILD_ZONE }}
            export CERT_ADMIN_EMAIL=${{ env.CERT_ADMIN_EMAIL }}

            # https://docs.vmware.com/en/VMware-Tanzu-Application-Platform/1.4/tap/contour-install.html
            # https://docs.vmware.com/en/VMware-Tanzu-Application-Platform/1.4/tap/tap-gui-tls-cert-mngr-ext-clusterissuer.html
            #tanzu package available list contour.tanzu.vmware.com -n ${{ env.TAP_INSTALL_NAMESPACE}}

            envsubst < ${{ env.TANZU_INSTALL_DIR }}/k8s/letsencrypt-prod-cluster-issuer.yaml > ${{ env.TANZU_INSTALL_DIR }}/k8s/deploy/letsencrypt-prod-cluster-issuer.yaml
            cat $TANZU_INSTALL_DIR/k8s/deploy/letsencrypt-prod-cluster-issuer.yaml
            kubectl apply -f ${{ env.TANZU_INSTALL_DIR }}/k8s/deploy/letsencrypt-prod-cluster-issuer.yaml -n cert-manager

            kubectl get clusterissuer -A -o wide
            kubectl describe clusterissuer letsencrypt-production
            kubectl get certs -n cert-manager

            envsubst < ${{ env.TANZU_INSTALL_DIR }}/k8s/deploycertificate.yaml > ${{ env.TANZU_INSTALL_DIR }}/k8s/deploy/deploycertificate.yaml
            cat $TANZU_INSTALL_DIR/k8s/deploy/deploycertificate.yaml
            kubectl apply -f ${{ env.TANZU_INSTALL_DIR }}/k8s/deploycertificate.yaml
            
            kubectl get certs -n cert-manager

      shell: bash     

    # https://docs.vmware.com/en/VMware-Tanzu-Application-Platform/1.4/tap/install.html#full-profile
    # Create a tap-values.yml  
    - name: Install TAP profile
      run: |

            tanzu package available list tap.tanzu.vmware.com --namespace ${{ env.TAP_INSTALL_NAMESPACE}}

            # mkdir ${{ env.TANZU_INSTALL_DIR }}/deploy

            # https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
            # https://tanzu.vmware.com/developer/guides/platform-security-secrets-sa-what-is/

            kubectl apply -f ${{ env.TANZU_INSTALL_DIR }}/metadata-store-ready-only.yaml
            export METADATA_STORE_ACCESS_TOKEN=$(kubectl create token metadata-store-read-client -n metadata-store)
            #export METADATA_STORE_ACCESS_TOKEN=$(kubectl get secret \
            #  $(kubectl get sa metadata-store-read-client -n metadata-store -o json \
            #  | jq -r '.secrets[0].name') -n metadata-store -o json \
            #  | jq -r '.data.token' \
            #  | base64 -d)

            # sa_secret_name=$(kubectl get sa metadata-store-read-client -n metadata-store -o json | jq -Mr '.secrets[].name')
            # sa_secret_value=$(kubectl get secrets  $sa_secret_name -o json | jq -Mr '.items[1].data.token' | base64 -d)

            acr_usr=$(az acr credential show --name ${{ env.REGISTRY_URL }} -g ${{ env.RG_APP }} | jq -r .username) # ${{ env.AZURE_CONTAINER_REGISTRY }} 
            acr_pwd=$(az acr credential show --name ${{ env.REGISTRY_URL }} -g ${{ env.RG_APP }} | jq -r .passwords[0].value)

            export INSTALL_REGISTRY_HOSTNAME=${{ env.REGISTRY_URL }}
            export INSTALL_REGISTRY_USERNAME=$acr_usr
            export INSTALL_REGISTRY_PASSWORD=$acr_pwd
            export INSTALL_REPO=${{ env.REPOSITORY }}

            export TAP_VERSION=${{ env.TAP_VERSION_NUMBER }}

            # need to substitute env var in the template file
            export TANZU_INSTALL_DIR=${{ env.TANZU_INSTALL_DIR }}
            export DEV_NAMESPACE=${{ env.DEV_NAMESPACE }}
            export APP_DNS_ZONE=${{ env.TANZU_DNS_CHILD_ZONE }}
            export TANZU_NET_USER=${{ env.TANZU_NET_USER }}
            export TANZU_NET_PASSWORD=${{ env.TANZU_NET_PASSWORD }}
            export AZURE_CONTAINER_REGISTRY=${{ env.AZURE_CONTAINER_REGISTRY }}
            export REGISTRY_URL=${{ env.REGISTRY_URL }}
            export REPOSITORY=${{ env.REPOSITORY }}
            export REPO_SUBFOLDER_APP_TAP=${{ env.REPO_SUBFOLDER_APP_TAP }}
            export GH_PAT=${{ env.GH_PAT }}

            export REPOSITORY_USERNAME=$acr_usr
            export REPOSITORY_PASSWORD=$acr_pwd

            ls -al ${{ github.workspace }}/${{ env.TANZU_INSTALL_DIR }}
            envsubst < ${{ env.TANZU_INSTALL_DIR }}/tap-values.yml > ${{ env.TANZU_INSTALL_DIR }}/deploy/tap-values.yml 
            echo ""
            ls -al ${{ env.TANZU_INSTALL_DIR }}/deploy/tap-values.yml 
            echo ""

            tanzu package install tap -p tap.tanzu.vmware.com -v $TAP_VERSION --values-file ${{ env.TANZU_INSTALL_DIR }}/deploy/tap-values.yml -n ${{ env.TAP_INSTALL_NAMESPACE}}
            tanzu package installed get tap -n ${{ env.TAP_INSTALL_NAMESPACE}}
            tanzu package installed list -A

            # Get the tanzu package available list buildservice.tanzu.vmware.com --namespace tap-install
            tbsVersion=$(tanzu package available list buildservice.tanzu.vmware.com --namespace ${{ env.TAP_INSTALL_NAMESPACE}} -o json | jq '.[] | .version' | tr -d '"')
            echo "Found Tanzu buildservice Package Version " $tbsVersion

            imgpkg copy --concurrency ${{ env.IMG_PKG_CONCURRENCY}} -b ${{ env.TANZU_REGISTRY}}/tanzu-application-platform/full-tbs-deps-package-repo:$tbsVersion \
              --to-repo ${INSTALL_REGISTRY_HOSTNAME}/${INSTALL_REPO}/tbs-full-deps

            tanzu package repository add tbs-full-deps-repository \
              --url ${INSTALL_REGISTRY_HOSTNAME}/${INSTALL_REPO}/tbs-full-deps:$tbsVersion \
              --namespace ${{ env.TAP_INSTALL_NAMESPACE}}

            tanzu package install full-tbs-deps -p full-tbs-deps.tanzu.vmware.com -v $tbsVersion -n ${{ env.TAP_INSTALL_NAMESPACE}}

      shell: bash

    # https://docs.vmware.com/en/VMware-Tanzu-Application-Platform/1.4/tap/namespace-provisioner-how-tos.html#control-desired-namespaces
    - name: Configure GitOps
      run: |

            # https://github.com/beeNotice/tanzu-tools/blob/main/tap/script/create-additional-dev-space.sh#L22
            echo TODO ...

      shell: bash

    - name: Get Ingress Controller IP
      run: |

            # helm ls --namespace ${{ env.ING_NS }}
            # sleep 15
            kubectl get deployments -n ${{ env.ING_NS }} -l app=contour
            kubectl get svc contour -n ${{ env.ING_NS }}
            kubectl describe svc envoy -n ${{ env.ING_NS }}

            ingress_controller_ip=$(kubectl get svc envoy -n ${{ env.ING_NS }} -o jsonpath="{.status.loadBalancer.ingress[*].ip}")
            echo "ING_CTL_IP:" $ingress_controller_ip
            echo "ING_CTL_IP=$ingress_controller_ip" >> $GITHUB_ENV

      shell: bash

    - name: Setup DNS
      run: |

            echo "ING_CTL_IP:" $ING_CTL_IP
            az deployment group create --name aks-dns -f iac/bicep/modules/aks/dns.bicep -g ${{ env.RG_APP }} \
            -p dnsZoneType=custom \
            -p customDns=${{ env.CUSTOM_DNS }} \     
            -p location=${{ env.LOCATION }} \
            -p vnetName=${{ env.VNET_NAME }} \
            -p aksSvcIp=$ING_CTL_IP

            echo "CLUSTER_RESOURCE_GROUP:" $managed_rg
            ingControllerPublicIpId=$(az network public-ip list -g $managed_rg --query "[?ipAddress!=null]|[?contains(ipAddress, '$ING_CTL_IP')].[id]" --output tsv)
            echo $ingControllerPublicIpId
            
            # az network public-ip update --ids $ingControllerPublicIpId --dns-name ${{ env.AZURE_DNS_LABEL_NAME }} -g $managed_rg

            echo "About to check DNS ..."
            dig @8.8.8.8 "tap-gui.${{ env.CUSTOM_DNS }}"
            # https://github.com/beeNotice/tanzu-tools/blob/main/tap/02_deploy-aks.sh

      shell: bash

    - name: Azure Logout security hardening
      run: |
          az logout
          az cache purge
          az account clear
      shell: bash