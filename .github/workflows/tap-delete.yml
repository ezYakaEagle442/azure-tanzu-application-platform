# This workflow will DELETE TAP on AKS
name: Delete TAP from AKS

env:



  # ==== Versions ====
  
  AZ_CLI_VERSION: 2.45.0
  TANZU_CLI_VERSION: v0.25.4
  TAP_VERSION_NUMBER: 1.4.0

  # ==== General settings  ====

  APP_NAME: tap42
  LOCATION: westeurope # francecentral
  RG_KV: rg-kv-tanzu101 # RG where to deploy KV
  RG_APP: rg-aks-tap-apps # RG where to deploy the other Azure services: AKS, TAP, ACR, MySQL, etc.
  
  REPOSITORY: tap                   # set this to your ACR repository
  # REPO_SUBFOLDER_APP_TAP: tanzu-app-tap

  ################################## DO NOT CHANGE params below   ################################## 
  
  # https://learn.microsoft.com/en-us/rest/api/storageservices/setting-timeouts-for-blob-service-operations
  AZ_BLOB_MAX_CONNECTIONS: 10
  AZ_BLOB_MAXSIZE_CONDITION: 440401920 # 420 Mb
  AZ_BLOB_TIMEOUT: 600

  # ==== Tanzu Tools ====
  TANZU_INSTALL_DIR: tanzu
  TANZU_ESSENTIALS: tanzu-cluster-essentials-linux-amd64-1.4.0.tgz
  TANZU_GUI_CAT: tap-gui-blank-catalog.tgz
  TANZU_CLI: tanzu-framework-linux-amd64-v0.25.4.tar # /!\ the version name must match M.n.p like v0.25.4 NOT v0.25.4.1

  TANZU_BLOB_CLI: tanzu-cli
  TANZU_BLOB_ESSENTIALS: tanzu-essentials
  TANZU_BLOB_GUI_CAT: tanzu-catalog

  TANZU_REGISTRY: registry.tanzu.vmware.com

  TAP_NAMESPACE: tanzu
  DEV_NAMESPACE: tap-dev
  TAP_INSTALL_NAMESPACE: tap-install
  KAPP_NAMESPACE: kapp-controller

  # ==== Secrets ====

  credentials: ${{ secrets.AZURE_CREDENTIALS }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

on:
  workflow_dispatch:
  workflow_call:

jobs:
 
  delete-tap:
    runs-on: ubuntu-latest
    steps:

    - name: Login with GHA Runner SP
      uses: azure/login@v1 # https://github.com/marketplace/actions/azure-login
      with:
        creds: ${{ env.credentials }} # ${{ secrets.AZURE_CREDENTIALS }}

    - name: Checkout
      uses: actions/checkout@v3 # https://github.com/actions/checkout

    - name: Set Base environment variables
      run: |

        # ==== AKS ====
        AKS_CLUSTER_NAME=$(az deployment group show --name aks-main -g ${{ env.RG_APP }} --query properties.outputs.aksName.value -o tsv | tr -d '\r' | tr -d '"')
        echo "AKS_CLUSTER_NAME="$AKS_CLUSTER_NAME
        echo "AKS_CLUSTER_NAME=$AKS_CLUSTER_NAME" >> $GITHUB_ENV

        # ==== Storage ====        
        storage_name=$(az deployment group show --name storage -g ${{ env.RG_APP }} --query properties.outputs.azurestorageName.value -o tsv)
        echo "storage_name=" $storage_name
        echo "AZ_STORAGE_NAME="$storage_name >> $GITHUB_ENV

        blobContainerName=$(az deployment group show --name storage -g ${{ env.RG_APP }} --query properties.outputs.blobcontainerName.value -o tsv)
        echo "blobContainerName=" $blobContainerName
        echo "AZ_BLOB_CONTAINER_NAME="$blobContainerName >> $GITHUB_ENV

        # ==== ACR ====
        REGISTRY_URL=$(az deployment group show --name acr -g ${{ env.RG_APP }} --query properties.outputs.acrRegistryUrl.value -o tsv)
        echo "REGISTRY_URL="$REGISTRY_URL
        echo "REGISTRY_URL="$REGISTRY_URL >> $GITHUB_ENV

        AZURE_CONTAINER_REGISTRY=$(az deployment group show --name acr -g ${{ env.RG_APP }} --query properties.outputs.acrName.value -o tsv)
        echo "AZURE_CONTAINER_REGISTRY="$AZURE_CONTAINER_REGISTRY
        echo "AZURE_CONTAINER_REGISTRY="$AZURE_CONTAINER_REGISTRY >> $GITHUB_ENV

         # ==== KV ====
        KV_NAME=$(az deployment group show --name aks-tap-kv -g ${{ env.RG_KV }} --query properties.outputs.keyVaultName.value -o tsv)
        echo "KV_NAME=$KV_NAME" >> $GITHUB_ENV 
        echo "KV_NAME=$KV_NAME"

        SPRING_CLOUD_AZURE_KEY_VAULT_ENDPOINT=$(az deployment group show --name aks-tap-kv -g ${{ env.RG_KV }} --query properties.outputs.keyVaultURI.value -o tsv)
        echo "SPRING_CLOUD_AZURE_KEY_VAULT_ENDPOINT=$SPRING_CLOUD_AZURE_KEY_VAULT_ENDPOINT" >> $GITHUB_ENV 
        echo "SPRING_CLOUD_AZURE_KEY_VAULT_ENDPOINT=$SPRING_CLOUD_AZURE_KEY_VAULT_ENDPOINT"
        
        # ==== IP ====

        echo "LOCAL_IP=$(curl whatismyip.akamai.com)" >> $GITHUB_ENV
        echo "GH_WORKSPACE=${{ github.workspace }}" >> $GITHUB_ENV # "/github/workspace"

      shell: bash

    - name: Set Dependent environment variables
      run: |

        acr_usr=$(az acr credential show --name ${{ env.REGISTRY_URL }} -g ${{ env.RG_APP }} | jq -r .username)
        acr_pwd=$(az acr credential show --name ${{ env.REGISTRY_URL }} -g ${{ env.RG_APP }} | jq -r .passwords[0].value)

        echo "acr_usr=$acr_usr" >> $GITHUB_ENV
        echo "acr_pwd=$acr_pwd" >> $GITHUB_ENV

      shell: bash

    - name: Display environment variables
      run: |

        echo "Checking GITHUB_ENV"
        echo "GH_WORKSPACE=$GH_WORKSPACE"
        echo "LOCAL_IP=$LOCAL_IP"
        echo "AZ_STORAGE_NAME="$AZ_STORAGE_NAME
        echo "AKS_CLUSTER_NAME="$AKS_CLUSTER_NAME
        echo "AZURE_CONTAINER_REGISTRY="$AZURE_CONTAINER_REGISTRY
        echo "REGISTRY_URL="$REGISTRY_URL        
        echo "acr_usr=$acr_usr"

      shell: bash

    # https://github.com/Azure/aks-set-context/tree/releases/v1
    - name: AKS Set Context
      uses: azure/aks-set-context@v1
      with:
          creds: '${{ secrets.AZURE_CREDENTIALS }}' # Azure credentials
          resource-group: ${{ env.RG_APP }} 
          cluster-name: ${{ env.AKS_CLUSTER_NAME }}
      id: akslogin


    - name: Authorize local IP access to the Azure BLOB Storage 
      if: ${{ always() }}
      run: |

        LOCAL_IP=$(curl whatismyip.akamai.com)
        echo "LOCAL_IP=$(curl whatismyip.akamai.com)" >> $GITHUB_ENV
        echo "About to ADD network-rule to ALLOW $LOCAL_IP to Azure BLOB Storage ${{ env.AZ_STORAGE_NAME }}"
        az storage account network-rule add --ip-address $LOCAL_IP --account-name  ${{ env.AZ_STORAGE_NAME }}  --action "Allow" -g ${{ env.RG_APP }}  --only-show-errors
        sleep 30

      shell: bash

    - name: Download Tanzu Tools from Azure BLOB Storage
      id: blob_download
      run: | 

        # https://learn.microsoft.com/en-us/azure/storage/blobs/blob-cli

        pwd
        ls -al

        # mkdir ${{ github.workspace }}/${{ env.TANZU_INSTALL_DIR }}
        ls -al ${{ github.workspace }}/${{ env.TANZU_INSTALL_DIR }}

        # TODO: need a workaround to resolve the network issues between GHA Runnr and Azure Storage
        # https://github.com/actions/runner-images/blob/main/images/linux/scripts/helpers/install.sh

        echo "About to download Tanzu tools from Azure BLOB Storage"
        az storage blob download --name ${{ env.TANZU_BLOB_CLI }} --file ${{ github.workspace }}/${{ env.TANZU_INSTALL_DIR }}/${{ env.TANZU_CLI }} --container-name ${{ env.AZ_BLOB_CONTAINER_NAME }} --account-name ${{ env.AZ_STORAGE_NAME }} --auth-mode login --max-connections ${{ env.AZ_BLOB_MAX_CONNECTIONS }}
        az storage blob download --name ${{ env.TANZU_BLOB_ESSENTIALS }} --file ${{ github.workspace }}/${{ env.TANZU_INSTALL_DIR }}/${{ env.TANZU_ESSENTIALS }} --container-name ${{ env.AZ_BLOB_CONTAINER_NAME }} --account-name ${{ env.AZ_STORAGE_NAME }} --auth-mode login --max-connections ${{ env.AZ_BLOB_MAX_CONNECTIONS }}
        az storage blob download --name ${{ env.TANZU_GUI_CAT }} --file ${{ github.workspace }}/${{ env.TANZU_INSTALL_DIR }}/${{ env.TANZU_GUI_CAT }} --container-name ${{ env.AZ_BLOB_CONTAINER_NAME }} --account-name ${{ env.AZ_STORAGE_NAME }} --auth-mode login --max-connections ${{ env.AZ_BLOB_MAX_CONNECTIONS }}

        ls -al ${{ github.workspace }}/${{ env.TANZU_INSTALL_DIR }}
        ls -al ${{ github.workspace }}/${{ env.TANZU_INSTALL_DIR }}/${{ env.TANZU_CLI }} 
        ls -al ${{ github.workspace }}/${{ env.TANZU_INSTALL_DIR }}/${{ env.TANZU_ESSENTIALS }} 
        ls -al ${{ github.workspace }}/${{ env.TANZU_INSTALL_DIR }}/${{ env.TANZU_GUI_CAT }}

      shell: bash

    - name: Disable local IP access to the Azure BLOB Storage 
      if: ${{ always() }}
      run: |
        echo "About to REMOVE network-rule ALLOWING $LOCAL_IP to Azure BLOB Storage ${{ env.AZ_STORAGE_NAME }}"
        az storage account network-rule remove --ip-address $LOCAL_IP --account-name  ${{ env.AZ_STORAGE_NAME }} -g ${{ env.RG_APP }} --only-show-errors
      shell: bash

    # https://docs.vmware.com/en/VMware-Tanzu-Application-Platform/1.4/tap/prerequisites.html
    # https://github.com/beeNotice/tanzu-tools/tree/main/tap

    - name: Get Tanzu Application Platform CLI
      run: |

            tar -xvf ${{ env.TANZU_INSTALL_DIR }}/${{ env.TANZU_CLI }} -C ${{ env.TANZU_INSTALL_DIR }}
            export TANZU_CLI_NO_INIT=true

            cd ${{ env.TANZU_INSTALL_DIR }}
            export VERSION=${{ env.TANZU_CLI_VERSION }}
            install cli/core/$VERSION/tanzu-core-linux_amd64 /usr/local/bin/tanzu

            tanzu version
            tanzu plugin install --local cli all
            tanzu plugin list

      shell: bash

    - name: Cleanup TAP install
      run: |

            echo "To troubleshoot, read https://docs.vmware.com/en/VMware-Tanzu-Application-Platform/1.4/tap/troubleshooting-tap-troubleshoot-install-tap.html"
            # https://docs.vmware.com/en/VMware-Tanzu-Application-Platform/1.4/tap/uninstall.html
            # https://docs.vmware.com/en/VMware-Tanzu-Application-Platform/1.4/tap/tap-gui-install-tap-gui.html

            # kubectl get apps -n ${{ env.TAP_INSTALL_NAMESPACE }} 
            # tanzu package available list -n tap-install

            # tbsVersion=$(tanzu package available list buildservice.tanzu.vmware.com -n tap-install -o json | jq '.[] | .version' | tr -d '"')
            # tanzu package installed update full-tbs-deps -v $tbsVersion -n tap-install --values-file XXXX/deploy/tap-values.yml

            # tanzu package installed list -n ${{ env.TAP_INSTALL_NAMESPACE }} -o=custom-columns=:.name
            # kubectl describe app buildservice -n tap-install
            for package in $(kubectl get apps -n ${{ env.TAP_INSTALL_NAMESPACE }} -o=custom-columns=:.metadata.name)
            do
              echo "Verifying App $package"
              tanzu package installed delete $package -n ${{ env.TAP_INSTALL_NAMESPACE }} --yes
            done

            # Deleting just the tap package is enough to delete correctly all its dependencies
            # tanzu package installed delete tap -n ${{ env.TAP_INSTALL_NAMESPACE }} --yes

            # tanzu package repository list --namespace tap-install
            # tanzu package repository delete PACKAGE-REPO-NAME --namespace tap-install
            echo "Verifying Package Repository List:"
            echo ""
            tanzu package repository list --namespace ${{ env.TAP_INSTALL_NAMESPACE }}

            echo ""
            echo "Verifying packagerepositories CRD List:"
            kubectl get packagerepositories -n ${{ env.TAP_INSTALL_NAMESPACE }} -o=custom-columns=:.metadata.name

            for repo in $(tanzu package repository list --namespace ${{ env.TAP_INSTALL_NAMESPACE }} -o=custom-columns=:.metadata.name)
            do
              echo "Verifying Package Repository $repo"
              kubectl delete packagerepositories $repo  -n ${{ env.TAP_INSTALL_NAMESPACE }}
              # tanzu package repository delete $repo n ${{ env.TAP_INSTALL_NAMESPACE }} --yes
              # tanzu package installed delete $package -n ${{ env.TAP_INSTALL_NAMESPACE }} --yes
            done

            az acr login --name ${{ env.REGISTRY_URL }} -u $acr_usr -p $acr_pwd
            az acr repository list --name ${{ env.AZURE_CONTAINER_REGISTRY }}
            az acr repository delete --repository ${{ env.REPOSITORY }}/tap-packages --name ${{ env.AZURE_CONTAINER_REGISTRY }} -u $acr_usr -p $acr_pwd --yes
            az acr repository delete --repository ${{ env.REPOSITORY }}/tbs-full-deps --name ${{ env.AZURE_CONTAINER_REGISTRY }} -u $acr_usr -p $acr_pwd --yes

            kubectl delete ns ${{ env.TAP_INSTALL_NAMESPACE}} --ignore-not-found=true
            kubectl delete ns ${{ env.KAPP_NAMESPACE}} --ignore-not-found=true --force=true --wait=false
            kubectl delete ns ${{ env.DEV_NAMESPACE}} --ignore-not-found=true --force=true --wait=false

            kubectl delete ns tanzu-cluster-essentials --ignore-not-found=true --force=true --wait=false
            kubectl delete ns secretgen-controller --ignore-not-found=true --force=true --wait=false
            kubectl delete ns tanzu-package-repo-global --ignore-not-found=true --force=true --wait=false

            kubectl get crd -o wide

            kubectl get crd packageinstalls.packaging.carvel.dev -o=json > crd.json
            kubectl patch crd/packageinstalls.packaging.carvel.dev -p '{"metadata":{"finalizers":[]}}' --type=merge

            kubectl get rolebinding pkgserver-auth-reader -n kube-system -o=json > crd.json
            kubectl delete rolebinding pkgserver-auth-reader -n kube-system

            kubectl get apiservice v1alpha1.data.packaging.carvel.dev -o=json > crd.json
            kubectl delete apiservice v1alpha1.data.packaging.carvel.dev

            kubectl delete clusterrole kapp-controller-user-role 
            kubectl delete clusterrole kapp-controller-cluster-role
            kubectl delete clusterrole secretgen-controller-cluster-role 

            kubectl delete clusterrolebinding pkg-apiserver:system:auth-delegator
            kubectl delete clusterrolebinding kapp-controller-cluster-role-binding

            kubectl delete clusterrolebinding secretgen-controller-cluster-role-binding

            kubectl get crd apps.kappctrl.k14s.io -o=json > crd.json
            # Edit your tmp.json file. Remove the kubernetes value from the finalizers field and save the file. It should look like :
            # "finalizers": [
            # ],
            kubectl patch crd/apps.kappctrl.k14s.io -p '{"metadata":{"finalizers":[]}}' --type=merge

            kubectl delete crd apps.kappctrl.k14s.io --wait=false --force=true --ignore-not-found=true 
            kubectl delete crd certificates.secretgen.k14s.io --wait=false --ignore-not-found=true --force=true 
            kubectl delete crd internalpackagemetadatas.internal.packaging.carvel.dev --wait=false --ignore-not-found=true --force=true
            kubectl delete crd internalpackages.internal.packaging.carvel.dev --wait=false --ignore-not-found=true --force=true
            kubectl delete crd packageinstalls.packaging.carvel.dev --wait=false --ignore-not-found=true --force=true
            kubectl delete crd packagerepositories.packaging.carvel.dev --wait=false --ignore-not-found=true --force=true
            kubectl delete crd passwords.secretgen.k14s.io --wait=false --ignore-not-found=true --force=true
            kubectl delete crd rsakeys.secretgen.k14s.io --wait=false --ignore-not-found=true --force=true
            kubectl delete crd secretexports.secretgen.carvel.dev --wait=false --ignore-not-found=true --force=true   
            kubectl delete crd secretimports.secretgen.carvel.dev --wait=false --ignore-not-found=true --force=true
            kubectl delete crd secrettemplates.secretgen.carvel.dev --wait=false --ignore-not-found=true --force=true
            kubectl delete crd sshkeys.secretgen.k14s.io --wait=false --ignore-not-found=true --force=true

            for tanzuCRD in $(kubectl api-resources --api-group='kappctrl.k14s.io/v1alpha1' -o=name)
            do
              echo "Verifying CRD $tanzuCRD"
              kubectl describe crd $tanzuCRD
            done

            for tanzuCRD in $(kubectl api-resources --api-group='packaging.carvel.dev/v1alpha1' -o=name)
            do
              echo "Verifying CRD $tanzuCRD"
              kubectl describe crd $tanzuCRD
            done

            for tanzuCRD in $(kubectl api-resources --api-group='secretgen.carvel.dev/v1alpha1' -o=name)
            do
              echo "Verifying CRD $tanzuCRD"
              kubectl describe crd $tanzuCRD
            done

            for tanzuCRD in $(kubectl api-resources --api-group='secretgen.k14s.io/v1alpha1' -o=name)
            do
              echo "Verifying CRD $tanzuCRD"
              kubectl describe crd $tanzuCRD
            done

            for tanzuCRD in $(kubectl api-resources --api-group='internal.packaging.carvel.dev/v1alpha1' -o=name)
            do
              echo "Verifying CRD $tanzuCRD"
              kubectl describe crd $tanzuCRD
            done

            for tanzuCRD in $(kubectl api-resources --api-group='storage.k8s.io/v1' -o=name)
            do
              echo "Verifying CRD $tanzuCRD"
              kubectl describe crd $tanzuCRD
            done

      shell: bash

    - name: Uninstall Cert-Manager
      run: |

          # https://cert-manager.io/docs/installation/helm/
          helm repo add jetstack https://charts.jetstack.io
          helm repo update          
          helm uninstall cert-manager --namespace cert-manager

      shell: bash



    - name: Azure Logout security hardening
      run: |
          az logout
          az cache purge
          az account clear
      shell: bash